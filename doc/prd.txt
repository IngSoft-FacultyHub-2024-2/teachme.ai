



code a webapp using TypeScript. 
Use nestjs for the web API implementation and nextjs for the frontend pages

Requirements description:
i want to create an app that will let the user:
- list the names and descriptions of coding katas, for example , FizzBuzz. 
- let the user select the codign kata
- show  its description, the goal to achieve and the working instrucitons. 
- following Red, Green, Refactor  test driven development (TDD) help the user to code the code to test and solve the codign kata.
- Once the kata has been chosen follow the following cycle: 
1 - let the user prompt an LLM like GPT-4.1 to generate each c# test , one at a time
2 - let the user review the test code and make changes either by prompting or changing the code directly.
3 -  if the test pass let the user go to step 1.

the programming language for the user code is c# and Microsoft Test is the testing framework. 

Core Features:

Coding Kata Selection & Details: Choose coding katas with clear descriptions and goals
Guided TDD Workflow with the user promting on each step and the app generating C# code: 
Use calls to an LMM to generate code 
Use MCP to check the code generated by the llm and let the use improve it by prompting the llm

The user will code in C# and will use MSTest 

Integrated  Code Generation: Built-in prompting interface for code assistance

Smart Help System: Context-aware guidance when you get stuck

Learning Assistant: Ask the selected LLM about C#, TDD principles, or refactoring techniques

Contextual Help: "Get unstuck" button that sends your current code/tests to the selected LLM for guidance
Knowledge Chat: Dedicated panel to ask questions about TDD concepts, C# syntax, or refactoring patterns
Smart Suggestions: App detects common issues (poor test names, large methods, etc.) and suggests asking Claude for help
Learning History: Save useful guidance and code examples for future reference
Progressive Hints: Escalating help levels from gentle nudges to detailed explanations

Example Help Scenarios:

"How do I write a better test name for this scenario?"
"What refactoring pattern should I use here?"
"Explain this C# feature I'm seeing in the generated code"
"Why is my test failing when it should pass?"


